import{_ as a,c as i,a2 as l,o as t}from"./chunks/framework.CU2KmuNA.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vars_hooks.md","filePath":"vars_hooks.md"}'),e={name:"vars_hooks.md"};function p(n,s,h,o,c,k){return t(),i("div",null,s[0]||(s[0]=[l(`<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>！！！！请 10000% 不要设置相同变量名 ！！！！</p><p>！！！！请 10000% 不要设置相同变量名 ！！！！</p><p>！！！！请 10000% 不要设置相同变量名 ！！！！</p></div><h2 id="变量定义" tabindex="-1">变量定义 <a class="header-anchor" href="#变量定义" aria-label="Permalink to &quot;变量定义&quot;">​</a></h2><p>以下三种变量统称为常规变量</p><ul><li>global: 全局变量，仅在 core 目录下的 <code>global_vars.yaml</code> 文件中以键值对形式进行定义</li><li>env: 环境变量，在测试用例依赖的环境文件中以键值对的形式进行定义</li><li>cache: 缓存变量，在系统内存中定义，可通过 <a href="./case_data.html#请求前后置附加说明">参数说明-请求前后置</a> 变量提取进行设置</li></ul><h2 id="变量存储" tabindex="-1">变量存储 <a class="header-anchor" href="#变量存储" aria-label="Permalink to &quot;变量存储&quot;">​</a></h2><ul><li>global: 在全局变量文件中进行持久化写入，键值不会重复，新值覆盖旧值</li><li>env：在当前测试用例数据所调用的测试环境文件中进行持久化写入，键值不会重复，新值覆盖旧值</li><li>cache：在同一 <code>python包</code> 目录下，写入所有测试用例运行过程的内存中，不会持久化，同一 <code>python包</code> 目录下所有测试用例运行结束后自动清除</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>变量持久化写入会冲刷掉手写注释内容</p></div><h2 id="变量替换逻辑" tabindex="-1">变量替换逻辑 <a class="header-anchor" href="#变量替换逻辑" aria-label="Permalink to &quot;变量替换逻辑&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>变量只有在测试数据 is_run(skip:list)、request、setup(sql)、teardown(sql、assert) 参数下可用，且变量定义顺序很重要！</p><ol><li>执行全局非前后置 hook</li><li>执行前置关联变量替换</li><li>执行前置SQL变量替换</li><li>执行前置 hook</li><li>执行请求数据（request参数下）变量替换</li><li>发送请求</li><li>执行后置SQL变量替换</li><li>执行后置 hook</li><li>执行断言变量替换</li></ol></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>严格禁止变量值设置为空值（None、none、null...）</p></div><ul><li><p>常规变量</p><p>请求数据解析时，会按照顺序分步（执行到哪一步就只对此步骤执行变量替换）执行变量替换操作， 寻找变量优先级为： <code>cache &gt; env &gt; global</code>，找到变量自动替换数据，未找到抛出异常</p></li><li><p>关联变量</p><p>默认在 cache 中存储关联变量</p><p>如果通过关联用例进行了关联变量设置，在关联测试用例执行后，会立即重新对当前测试用例数据进行变量替换操作（仅处理关联测试用例变量语法）</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>关联变量仅对当前单个测试用例可用，不能与其他测试用例共享（一个测试步骤就相当于一个测试用例），关联变量替换后，将自动清除所有已替换的关联变量； 虽然此变量不可全局使用，但依然不要与其他变量名进行重复命名</p></div></li></ul><h2 id="变量表达式" tabindex="-1">变量表达式 <a class="header-anchor" href="#变量表达式" aria-label="Permalink to &quot;变量表达式&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>变量命名规则: <code>a-zA-Z_</code></p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>变量表达式要尽可能使用带有大括号的格式，因为没有大括号的变量强制要求前后不能包含任何内容；</p><p>在使用过程中，为了方便，往往不写大括号，但是这通常存在一些隐式问题，例如在 yaml 中：<code>value: ^test</code> 你会认为变量 <code>^test</code> 前后确实没有任何内容， 但是，在 yaml 解析后，变量 <code>^test</code> 被解析为 <code>&#39;^test&#39;</code>，此时变量前后就多出来个单引号，因此变量就不会被识别到</p><p>这种强制规则是为了尽可能避免用例数据中存在与变量名相似的请求体或其他内容被错误识别</p></div><ul><li><p>常规变量</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\${var} 或 $var</span></span></code></pre></div></li><li><p>关联测试用例变量：仅对当前单个测试用例数据可用</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>^{var} 或 ^var</span></span></code></pre></div><p>⚠️ 只有在执行关联测试用例时，通过关联测试用例响应设置了关联变量的情况下，才会生效</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># E.g.:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      case_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">event_query_002</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">r_code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.json.status</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assert ^{r_code} == pm.response.get(&#39;json&#39;).get(&#39;status&#39;)</span></span></code></pre></div></li></ul><h2 id="hook-钩子函数" tabindex="-1">hook（钩子函数） <a class="header-anchor" href="#hook-钩子函数" aria-label="Permalink to &quot;hook（钩子函数）&quot;">​</a></h2><p>仅在 core 目录下的 hooks.py 文件中定义</p><p>在测试用例前后置 hook 参数下定义时，只执行代码, 在其他地方使用时, 将执行代码并替换为返回值</p><ul><li><p>hook：全局可用</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\${func()}</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># E.g.:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试 hook，时间：\${current_time()}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${current_time()}</span></span></code></pre></div></li></ul><h2 id="变量使用方法" tabindex="-1">变量使用方法 <a class="header-anchor" href="#变量使用方法" aria-label="Permalink to &quot;变量使用方法&quot;">​</a></h2><p>阅读上面【变脸替换逻辑】和【变量表达式】，按语法直接在测试用例数据中使用即可</p>`,21)]))}const g=a(e,[["render",p]]);export{r as __pageData,g as default};
