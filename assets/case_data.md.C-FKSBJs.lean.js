import{_ as t,c as i,a2 as a,o as l}from"./chunks/framework.CU2KmuNA.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"case_data.md","filePath":"case_data.md"}'),e={name:"case_data.md"};function n(h,s,p,k,d,r){return l(),i("div",null,s[0]||(s[0]=[a(`<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>测试数据支持 Yaml 和 Json 两种文件格式定义，它们是完全兼容的，但是请不要在 Yaml 文件格式内以 Json 格式定义数据！</p><p>实例：<a href="https://github.com/wu-clan/httpfpt/tree/master/httpfpt/data/test_data/test_project" target="_blank" rel="noreferrer">test_project / case_data_files</a></p></div><h2 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明" aria-label="Permalink to &quot;参数说明&quot;">​</a></h2><p>参数中的一个 <code>-</code> 代表两个空格</p><p>必填列中的 <code>Y / Y</code> 表示如果父级填写则必须填写</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:center;">类型</th><th style="text-align:center;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">config</td><td style="text-align:center;">dict</td><td style="text-align:center;">Y</td><td style="text-align:left;">当前数据文件中所有测试用例的&quot;统一配置&quot;，默认应用到当前文件内的所有测试用例</td></tr><tr><td style="text-align:left;">- allure</td><td style="text-align:center;">dict</td><td style="text-align:center;">Y</td><td style="text-align:left;">allure 测试报告配置</td></tr><tr><td style="text-align:left;">-- epic</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">allure epic</td></tr><tr><td style="text-align:left;">-- feature</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">allure feature</td></tr><tr><td style="text-align:left;">-- story</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">allure story</td></tr><tr><td style="text-align:left;">-- severity</td><td style="text-align:center;">str / null</td><td style="text-align:center;">N</td><td style="text-align:left;">allure severity：severity、critical、normal、minor、trivial</td></tr><tr><td style="text-align:left;">- request</td><td style="text-align:center;">dict</td><td style="text-align:center;">Y</td><td style="text-align:left;">请求参数</td></tr><tr><td style="text-align:left;">-- env</td><td style="text-align:center;">str</td><td style="text-align:center;">N</td><td style="text-align:left;">测试环境，位于 core/run_env/ 目录下的文件名，必须以 <code>.env</code> 结尾</td></tr><tr><td style="text-align:left;">-- headers</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求头</td></tr><tr><td style="text-align:left;">-- timeout</td><td style="text-align:center;">int / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求超时，用于测试用例接口请求超时时长，如果未设置或为空，则默认使用 <a href="./config.html#🔧-request">core/conf.toml</a> 文件中的配置</td></tr><tr><td style="text-align:left;">-- verify</td><td style="text-align:center;">bool / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求验证，用于测试用例接口请求验证，如果未设置或为空，则默认使用 <a href="./config.html#🔧-request">core/conf.toml</a> 文件中的配置</td></tr><tr><td style="text-align:left;">-- redirects</td><td style="text-align:center;">bool / null</td><td style="text-align:center;">N</td><td style="text-align:left;">重定向，用于测试用例接口请求重定向，如果未设置或为空，则默认使用 <a href="./config.html#🔧-request">core/conf.toml</a> 文件中的配置</td></tr><tr><td style="text-align:left;">-- proxies</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求代理，用于测试用例接口请求代理，如果未设置或为空，则默认使用 <a href="./config.html#🔧-request">core/conf.toml</a> 文件中的配置</td></tr><tr><td style="text-align:left;">--- http</td><td style="text-align:center;">str / null</td><td style="text-align:center;">Y / Y</td><td style="text-align:left;">http 代理</td></tr><tr><td style="text-align:left;">--- https</td><td style="text-align:center;">str / null</td><td style="text-align:center;">Y / Y</td><td style="text-align:left;">https 代理</td></tr><tr><td style="text-align:left;">-- retry</td><td style="text-align:center;">int / null</td><td style="text-align:center;">N</td><td style="text-align:left;">接口请求响应异常时的重试次数，如果未设置或为空，则默认使用 <a href="./config.html#🔧-request">core/conf.toml</a> 文件中的配置</td></tr><tr><td style="text-align:left;">- module</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">用例所属模块</td></tr><tr><td style="text-align:left;">- is_run</td><td style="text-align:center;">bool / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#is-run">是否执行</a></td></tr><tr><td style="text-align:left;">- mark</td><td style="text-align:center;">list / null</td><td style="text-align:center;">N</td><td style="text-align:left;">pytest mark 标记</td></tr><tr><td style="text-align:left;">test_steps</td><td style="text-align:center;">list / dict</td><td style="text-align:center;">Y</td><td style="text-align:left;">测试步骤，多条测试用例时，务必使用 List[dict] 格式</td></tr><tr><td style="text-align:left;">- name</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">测试用例名称</td></tr><tr><td style="text-align:left;">- case_id</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">测试用例唯一 id，建议使用蛇形命名法</td></tr><tr><td style="text-align:left;">- description</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">测试用例描述</td></tr><tr><td style="text-align:left;">- is_run</td><td style="text-align:center;">bool / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#is-run">是否执行</a></td></tr><tr><td style="text-align:left;">- mark</td><td style="text-align:center;">bool / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">pytest mark 标记，用于 pytest -m 参数，如果为空，则会应用统一配置中的请求头</td></tr><tr><td style="text-align:left;">- retry</td><td style="text-align:center;">int / null</td><td style="text-align:center;">N</td><td style="text-align:left;">接口请求响应异常时的重试次数，如果未设置或为空，则默认使用统一配置中的 retry</td></tr><tr><td style="text-align:left;">- request</td><td style="text-align:center;">dict</td><td style="text-align:center;">Y</td><td style="text-align:left;">请求参数</td></tr><tr><td style="text-align:left;">-- method</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">请求方式，必须大写：GET、POST、PUT、DELETE、PATCH</td></tr><tr><td style="text-align:left;">-- url</td><td style="text-align:center;">str</td><td style="text-align:center;">Y</td><td style="text-align:left;">请求链接，不包含域名时，域名需在测试环境文件中配置，域名定义方式：<code>host=</code> 优先于 <code>HOST=</code>；如果是完整链接，将不做任何处理</td></tr><tr><td style="text-align:left;">-- params</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求/查询参数</td></tr><tr><td style="text-align:left;">-- headers</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求头，如果为空，则会应用统一配置中的请求头，如果统一配置中也为空，则根据 <code>body_type</code> 自动解析，如果同时设置，则会应用当前请求头</td></tr><tr><td style="text-align:left;">-- cookies</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求发送时携带的 cookies</td></tr><tr><td style="text-align:left;">-- body_type</td><td style="text-align:center;">str / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求数据类型，支持：form、x_form、binary、GraphQL、text、js、json、html、xml</td></tr><tr><td style="text-align:left;">-- body</td><td style="text-align:center;">str / bytes / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求体</td></tr><tr><td style="text-align:left;">-- files</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求文件上传，类似于在 postman 中使用 form-data 上传文件；需要将 body 中的文件上传参数在此定义，并删除 body 中的文件上传参数，类型为 Dict[str, str] / Dict[str, List[str]]</td></tr><tr><td style="text-align:left;">- setup</td><td style="text-align:center;">list / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求前置</td></tr><tr><td style="text-align:left;">-- testcase</td><td style="text-align:center;">str / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#testcase">前置关联测试用例</a></td></tr><tr><td style="text-align:left;">-- sql</td><td style="text-align:center;">str / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#sql">前置 sql</a></td></tr><tr><td style="text-align:left;">-- hook</td><td style="text-align:center;">str / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="./vars_hooks.html#hook-钩子函数">前置钩子函数</a></td></tr><tr><td style="text-align:left;">-- wait_time</td><td style="text-align:center;">int / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求前等待时间，单位：秒</td></tr><tr><td style="text-align:left;">- teardown</td><td style="text-align:center;">list / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求后置</td></tr><tr><td style="text-align:left;">-- sql</td><td style="text-align:center;">str / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#sql">后置 sql</a></td></tr><tr><td style="text-align:left;">-- hook</td><td style="text-align:center;">str / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="./vars_hooks.html#hook-钩子函数">后置钩子函数</a></td></tr><tr><td style="text-align:left;">-- extract</td><td style="text-align:center;">dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#extract">变量提取</a></td></tr><tr><td style="text-align:left;">-- assert</td><td style="text-align:center;">str / dict / null</td><td style="text-align:center;">N</td><td style="text-align:left;"><a href="#assert">高级断言</a></td></tr><tr><td style="text-align:left;">-- wait_time</td><td style="text-align:center;">int / null</td><td style="text-align:center;">N</td><td style="text-align:left;">请求后等待时间，单位：秒</td></tr></tbody></table><h2 id="参数附加说明" tabindex="-1">参数附加说明 <a class="header-anchor" href="#参数附加说明" aria-label="Permalink to &quot;参数附加说明&quot;">​</a></h2><h3 id="is-run" tabindex="-1">is_run <a class="header-anchor" href="#is-run" aria-label="Permalink to &quot;is_run&quot;">​</a></h3><p>config 和 test_steps 中的 is_run 参数有多种实现方式</p><p>⚠️ config 中如果设置此参数，如果条件成立，将跳过执行当前文件下所有测试用例</p><ol><li><p>None 值, 默认执行</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">is_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># None</span></span></code></pre></div></li><li><p>bool 类型值, True / False, 是否跳过执行</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">is_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # bool</span></span></code></pre></div></li><li><p>dict 类型值, skip - reason, 自定义跳过执行原因</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">is_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # bool</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">跳过执行原因</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div></li><li><p>dict 类型值, skip_if - reason, 条件为真时跳过执行</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">is_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  skip_if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${timeout} == None</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">python 表达式</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">跳过执行原因</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div></li></ol><h2 id="请求前后置附加说明" tabindex="-1">请求前后置附加说明 <a class="header-anchor" href="#请求前后置附加说明" aria-label="Permalink to &quot;请求前后置附加说明&quot;">​</a></h2><p>在请求前后置数据定义中，一条数据就相当于一个动作，支持定义多个相同的动作，测试将按照定义顺序依次执行，当动作数量大于 0 时，setup / teardown 都必须是 List 格式</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">teardown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span></code></pre></div><h3 id="testcase" tabindex="-1">testcase <a class="header-anchor" href="#testcase" aria-label="Permalink to &quot;testcase&quot;">​</a></h3><p>setup 中的 testcase 参数支持三种功能</p><ol><li><p>执行关联测试用例</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试用例 case_id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # value: str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">event_query_001</span></span></code></pre></div></li><li><p><a href="./vars_hooks.html#变量表达式">关联测试用例变量提取</a></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试用例 case_id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">变量 key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">值 value, jsonpath 表达式, 数据依赖关联测试用例 response 数据集</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">event_query_002</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rcode</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.status_code</span></span></code></pre></div></li><li><p>更新关联测试用例请求数据</p><p>当与 response 参数同时存在时，response 用于变量提取的响应数据集取决于 response 的定义位置，如果在 response 参数前存在 request 参数，那么此次提取的数据集将来自替换了请求参数后的请求响应数据集，否则，则来自上一个请求的响应数据集...</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    case_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试用例 case_id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># list</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">要更新的值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Any</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">需要进行更新或新增值的 jsonpath 表达式，用于数据更新或新增定位，表达式正则：r&#39;^\\$\\.[a-zA-Z]-(?:\\.[a-zA-Z]-)*$&#39;</span></span></code></pre></div></li></ol><h3 id="sql" tabindex="-1">sql <a class="header-anchor" href="#sql" aria-label="Permalink to &quot;sql&quot;">​</a></h3><p>setup / teardown 中的 sql 参数支持两种功能</p><ol><li><p>执行 sql 语句</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SELECT * FROM xxx WHERE xxx=xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # value: str</span></span></code></pre></div></li><li><p>变量提取</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">变量 key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">变量类型：env / global / cache</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">执行 sql 查询</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">值 value, jsonpath 表达式, 数据依赖 sql 查询结果</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gtr_ID</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SELECT o.id FROM onetime AS o WHERE name = &#39;gtr&#39;;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.id</span></span></code></pre></div></li></ol><h3 id="extract" tabindex="-1">extract <a class="header-anchor" href="#extract" aria-label="Permalink to &quot;extract&quot;">​</a></h3><ul><li><p>变量提取</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">变量 key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">变量类型：env / global / cache</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">值 value, jsonpath 表达式, 数据依赖 response 数据集</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test_cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.status_code</span></span></code></pre></div></li></ul><h3 id="assert" tabindex="-1">assert <a class="header-anchor" href="#assert" aria-label="Permalink to &quot;assert&quot;">​</a></h3><p>teardown 中的 assert 参数支持多种实现方式</p><ol><li><p>常规断言：</p><p>与 python assert 的语法格式基本一致，但比较值受约束, 比较值从 <a href="./use_jsonpath.html#response-数据集">response 数据集</a> 进行取值， 并且以 <code>pm.response.get(&#39;&#39;)</code> 语法开始取值，后面可以继续使用 .get() 方法或其他 python 可执行代码， 为了避免引号问题，断言脚本内必须使用<code>英文单引号</code>处理</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assert 预期 条件 pm.response.get(&#39;xxx&#39;), &#39;错误说明&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # value: str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assert 200 == pm.response.get(&#39;status_code&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assert &#39;postId&#39; not in str(pm.response.get(&#39;content&#39;)), &#39;No content&#39;</span></span></code></pre></div><details class="details custom-block"><summary>扩展语法</summary><p>dirty-equals 库专属, 不要在断言语句中带有除 dirty_equals 库以外的外部函数，仅支持简易验证操作, 在使用前, 务必阅读它的官方使用文档：<a href="https://dirty-equals.helpmanual.io/latest/" target="_blank" rel="noreferrer">v0.7.1</a></p><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assert pm.response.get(&#39;json&#39;).get(&#39;uuid&#39;) == IsUUID, &#39;UUID 类型错误&#39;</span></span></code></pre></div></details></li><li><p>jsonpath 断言（非常规断言）:</p><ul><li><a href="./assert_type.html">断言类型</a></li><li><a href="./use_jsonpath.html#jsonpath-取值">JsonPath 取值</a></li><li><a href="./use_jsonpath.html#response-数据集">response 数据集</a></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言说明 / 错误信息, 为空时，将展示内部定义信息</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str / None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言类型</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">预期值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Any</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonpath 表达式，用于从 response 数据集取值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">检查接口链接</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">str_eq</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://api.anonfiles.com/upload</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.url</span></span></code></pre></div></li><li><p>sql 断言（非常规断言）:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言说明 / 错误信息, 为空时，将展示内部定义信息</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str / None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言类型</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">预期值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Any</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">执行 sql 查询</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonpath 表达式，用于从 sql 查询结果取值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">eq</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8848</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SELECT p.name FROM phone p WHERE material = ‘钛金’;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$.name</span></span></code></pre></div></li><li><p><a href="https://json-schema.org/" target="_blank" rel="noreferrer">jsonschema</a> 断言（非常规断言）:</p><p>此断言方式会直接验证请求响应结果（接口成功响应时返回的 json 数据）</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言说明 / 错误信息</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str / None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonschema</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 固定值</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonschema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonschema 表达式</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # dict</span></span></code></pre></div><p>E.g.:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonschema</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonschema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Product</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">A product from Acme&#39;s catalog</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        productId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The unique identifier for a product</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">integer</span></span></code></pre></div><p>jsonschema 表达式以 json 格式编写可能更加直观，但不要在 yaml 文件中以 json 格式定义！</p><p>可以选择直接将整个测试用例数据以 json 文件格式编写！</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;assert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonschema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;jsonschema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Product&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A product from Acme&#39;s catalog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             &quot;productId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;integer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The unique identifier for a product&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>正则断言（非常规断言）:</p><ul><li><a href="./use_jsonpath.html#response-数据集">response 数据集</a></li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">断言说明 / 错误信息</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str / None</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">re</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 固定值</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">正则表达式</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    jsonpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jsonpath 表达式，用于从请求响应取值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # str</span></span></code></pre></div></li></ol>`,24)]))}const y=t(e,[["render",n]]);export{g as __pageData,y as default};
